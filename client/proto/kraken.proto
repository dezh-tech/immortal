syntax = "proto3";

package kraken;

option go_package = "github.com/dezh-tech/immortal/client";

// Service definitions

// ServiceRegistry handles service registration
service ServiceRegistry {
  // Registers a service with the registry
  rpc registerService (registerServiceRequest) returns (registerServiceResponse);
}

// Config service provides configuration details
service Config {
  // Retrieves the current configuration
  rpc getConfig (EmptyRequest) returns (getConfigResponse);
}

// Log service handles logging operations
service Log {
  // Adds a log entry
  rpc addLog (addLogRequest) returns (addLogResponse);
}

// Message definitions

// Request to register a service
message registerServiceRequest {
  string url = 1;                        // Service URL
  uint32 heartbeat_duration_in_sec = 2;  // Heartbeat interval in seconds
  ServiceTypeEnum type = 3;              // Type of the service (e.g., RELAY)
  string region = 4;                     // Region of the service
}

// Response after registering a service
message registerServiceResponse {
  bool success = 1;                      // Indicates if registration was successful
  optional string message = 2;           // Optional message with additional information
  string token = 3;                      // Token assigned to the registered service
}

// Empty request used for methods that do not require parameters
message EmptyRequest {}

// Request to add a log entry
message addLogRequest {
  string message = 1;                    // Log message content
  string stack = 2;                      // Stack trace or additional log details
}

// Response after adding a log entry
message addLogResponse {
  bool success = 1;                      // Indicates if the log entry was successfully added
  optional string message = 2;           // Optional message with additional information
}

// Configuration limitations
message limitations {
  int32 max_message_length = 1;          // Maximum allowed message length
  int32 max_subscriptions = 2;           // Maximum number of subscriptions allowed
  int32 max_filters = 3;                 // Maximum number of filters allowed
  int32 max_subid_length = 4;            // Maximum length of a subscription ID
  int32 min_pow_difficulty = 5;          // Minimum proof-of-work difficulty
  bool auth_required = 6;                // Indicates if authentication is required
  bool payment_required = 7;             // Indicates if payment is required
  bool restricted_writes = 8;            // Indicates if writes are restricted
  int32 max_event_tags = 9;              // Maximum number of event tags allowed
  int32 max_content_length = 10;         // Maximum length of content allowed
  int64 created_at_lower_limit = 11;     // Lower limit for creation timestamps
  int64 created_at_upper_limit = 12;     // Upper limit for creation timestamps
  uint32 default_query_limit = 13;       // Defualt of query limit
  uint32 max_query_limit = 14;           // Maximum of query limit
}

// Response containing configuration details
message getConfigResponse {
  limitations limitations = 1;           // Configuration limitations
  string url = 2;                        // Service URL
}

// Enum definitions

// Types of services that can be registered
enum ServiceTypeEnum {
  UNKNOWN = 0;                           // Unknown service type
  RELAY = 1;                             // Relay service type
}
