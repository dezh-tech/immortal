// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: migration.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Migration_ImportEvents_FullMethodName = "/relay.v1.Migration/ImportEvents"
	Migration_ExportEvents_FullMethodName = "/relay.v1.Migration/ExportEvents"
)

// MigrationClient is the client API for Migration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MigrationClient interface {
	ImportEvents(ctx context.Context, opts ...grpc.CallOption) (Migration_ImportEventsClient, error)
	ExportEvents(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Migration_ExportEventsClient, error)
}

type migrationClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationClient(cc grpc.ClientConnInterface) MigrationClient {
	return &migrationClient{cc}
}

func (c *migrationClient) ImportEvents(ctx context.Context, opts ...grpc.CallOption) (Migration_ImportEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Migration_ServiceDesc.Streams[0], Migration_ImportEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &migrationImportEventsClient{stream}
	return x, nil
}

type Migration_ImportEventsClient interface {
	Send(*Event) error
	CloseAndRecv() (*ImportEventResponse, error)
	grpc.ClientStream
}

type migrationImportEventsClient struct {
	grpc.ClientStream
}

func (x *migrationImportEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *migrationImportEventsClient) CloseAndRecv() (*ImportEventResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *migrationClient) ExportEvents(ctx context.Context, in *Filter, opts ...grpc.CallOption) (Migration_ExportEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Migration_ServiceDesc.Streams[1], Migration_ExportEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &migrationExportEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Migration_ExportEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type migrationExportEventsClient struct {
	grpc.ClientStream
}

func (x *migrationExportEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MigrationServer is the server API for Migration service.
// All implementations should embed UnimplementedMigrationServer
// for forward compatibility
type MigrationServer interface {
	ImportEvents(Migration_ImportEventsServer) error
	ExportEvents(*Filter, Migration_ExportEventsServer) error
}

// UnimplementedMigrationServer should be embedded to have forward compatible implementations.
type UnimplementedMigrationServer struct {
}

func (UnimplementedMigrationServer) ImportEvents(Migration_ImportEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportEvents not implemented")
}
func (UnimplementedMigrationServer) ExportEvents(*Filter, Migration_ExportEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportEvents not implemented")
}

// UnsafeMigrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationServer will
// result in compilation errors.
type UnsafeMigrationServer interface {
	mustEmbedUnimplementedMigrationServer()
}

func RegisterMigrationServer(s grpc.ServiceRegistrar, srv MigrationServer) {
	s.RegisterService(&Migration_ServiceDesc, srv)
}

func _Migration_ImportEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MigrationServer).ImportEvents(&migrationImportEventsServer{stream})
}

type Migration_ImportEventsServer interface {
	SendAndClose(*ImportEventResponse) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type migrationImportEventsServer struct {
	grpc.ServerStream
}

func (x *migrationImportEventsServer) SendAndClose(m *ImportEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *migrationImportEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Migration_ExportEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MigrationServer).ExportEvents(m, &migrationExportEventsServer{stream})
}

type Migration_ExportEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type migrationExportEventsServer struct {
	grpc.ServerStream
}

func (x *migrationExportEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Migration_ServiceDesc is the grpc.ServiceDesc for Migration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Migration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.v1.Migration",
	HandlerType: (*MigrationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportEvents",
			Handler:       _Migration_ImportEvents_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExportEvents",
			Handler:       _Migration_ExportEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "migration.proto",
}
