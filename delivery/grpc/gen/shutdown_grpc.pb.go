// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: shutdown.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shutdown_Shutdown_FullMethodName = "/relay.v1.Shutdown/Shutdown"
)

// ShutdownClient is the client API for Shutdown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShutdownClient interface {
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type shutdownClient struct {
	cc grpc.ClientConnInterface
}

func NewShutdownClient(cc grpc.ClientConnInterface) ShutdownClient {
	return &shutdownClient{cc}
}

func (c *shutdownClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, Shutdown_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShutdownServer is the server API for Shutdown service.
// All implementations should embed UnimplementedShutdownServer
// for forward compatibility
type ShutdownServer interface {
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedShutdownServer should be embedded to have forward compatible implementations.
type UnimplementedShutdownServer struct {
}

func (UnimplementedShutdownServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

// UnsafeShutdownServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShutdownServer will
// result in compilation errors.
type UnsafeShutdownServer interface {
	mustEmbedUnimplementedShutdownServer()
}

func RegisterShutdownServer(s grpc.ServiceRegistrar, srv ShutdownServer) {
	s.RegisterService(&Shutdown_ServiceDesc, srv)
}

func _Shutdown_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShutdownServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shutdown_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShutdownServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shutdown_ServiceDesc is the grpc.ServiceDesc for Shutdown service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shutdown_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.v1.Shutdown",
	HandlerType: (*ShutdownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _Shutdown_Shutdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shutdown.proto",
}
