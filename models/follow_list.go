// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FollowList is an object representing the database table.
type FollowList struct {
	Follower  string    `boil:"follower" json:"follower" toml:"follower" yaml:"follower"`
	Following string    `boil:"following" json:"following" toml:"following" yaml:"following"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *followListR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L followListL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FollowListColumns = struct {
	Follower  string
	Following string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Follower:  "follower",
	Following: "following",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

var FollowListTableColumns = struct {
	Follower  string
	Following string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	Follower:  "follow_list.follower",
	Following: "follow_list.following",
	CreatedAt: "follow_list.created_at",
	UpdatedAt: "follow_list.updated_at",
	DeletedAt: "follow_list.deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var FollowListWhere = struct {
	Follower  whereHelperstring
	Following whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	Follower:  whereHelperstring{field: "\"follow_list\".\"follower\""},
	Following: whereHelperstring{field: "\"follow_list\".\"following\""},
	CreatedAt: whereHelpertime_Time{field: "\"follow_list\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"follow_list\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"follow_list\".\"deleted_at\""},
}

// FollowListRels is where relationship names are stored.
var FollowListRels = struct {
	FollowerUsersMetadatum  string
	FollowingUsersMetadatum string
}{
	FollowerUsersMetadatum:  "FollowerUsersMetadatum",
	FollowingUsersMetadatum: "FollowingUsersMetadatum",
}

// followListR is where relationships are stored.
type followListR struct {
	FollowerUsersMetadatum  *UsersMetadatum `boil:"FollowerUsersMetadatum" json:"FollowerUsersMetadatum" toml:"FollowerUsersMetadatum" yaml:"FollowerUsersMetadatum"`
	FollowingUsersMetadatum *UsersMetadatum `boil:"FollowingUsersMetadatum" json:"FollowingUsersMetadatum" toml:"FollowingUsersMetadatum" yaml:"FollowingUsersMetadatum"`
}

// NewStruct creates a new relationship struct
func (*followListR) NewStruct() *followListR {
	return &followListR{}
}

func (r *followListR) GetFollowerUsersMetadatum() *UsersMetadatum {
	if r == nil {
		return nil
	}
	return r.FollowerUsersMetadatum
}

func (r *followListR) GetFollowingUsersMetadatum() *UsersMetadatum {
	if r == nil {
		return nil
	}
	return r.FollowingUsersMetadatum
}

// followListL is where Load methods for each relationship are stored.
type followListL struct{}

var (
	followListAllColumns            = []string{"follower", "following", "created_at", "updated_at", "deleted_at"}
	followListColumnsWithoutDefault = []string{"follower", "following"}
	followListColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at"}
	followListPrimaryKeyColumns     = []string{"follower", "following"}
	followListGeneratedColumns      = []string{}
)

type (
	// FollowListSlice is an alias for a slice of pointers to FollowList.
	// This should almost always be used instead of []FollowList.
	FollowListSlice []*FollowList
	// FollowListHook is the signature for custom FollowList hook methods
	FollowListHook func(context.Context, boil.ContextExecutor, *FollowList) error

	followListQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	followListType                 = reflect.TypeOf(&FollowList{})
	followListMapping              = queries.MakeStructMapping(followListType)
	followListPrimaryKeyMapping, _ = queries.BindMapping(followListType, followListMapping, followListPrimaryKeyColumns)
	followListInsertCacheMut       sync.RWMutex
	followListInsertCache          = make(map[string]insertCache)
	followListUpdateCacheMut       sync.RWMutex
	followListUpdateCache          = make(map[string]updateCache)
	followListUpsertCacheMut       sync.RWMutex
	followListUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var followListAfterSelectMu sync.Mutex
var followListAfterSelectHooks []FollowListHook

var followListBeforeInsertMu sync.Mutex
var followListBeforeInsertHooks []FollowListHook
var followListAfterInsertMu sync.Mutex
var followListAfterInsertHooks []FollowListHook

var followListBeforeUpdateMu sync.Mutex
var followListBeforeUpdateHooks []FollowListHook
var followListAfterUpdateMu sync.Mutex
var followListAfterUpdateHooks []FollowListHook

var followListBeforeDeleteMu sync.Mutex
var followListBeforeDeleteHooks []FollowListHook
var followListAfterDeleteMu sync.Mutex
var followListAfterDeleteHooks []FollowListHook

var followListBeforeUpsertMu sync.Mutex
var followListBeforeUpsertHooks []FollowListHook
var followListAfterUpsertMu sync.Mutex
var followListAfterUpsertHooks []FollowListHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FollowList) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FollowList) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FollowList) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FollowList) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FollowList) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FollowList) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FollowList) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FollowList) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FollowList) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range followListAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFollowListHook registers your hook function for all future operations.
func AddFollowListHook(hookPoint boil.HookPoint, followListHook FollowListHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		followListAfterSelectMu.Lock()
		followListAfterSelectHooks = append(followListAfterSelectHooks, followListHook)
		followListAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		followListBeforeInsertMu.Lock()
		followListBeforeInsertHooks = append(followListBeforeInsertHooks, followListHook)
		followListBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		followListAfterInsertMu.Lock()
		followListAfterInsertHooks = append(followListAfterInsertHooks, followListHook)
		followListAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		followListBeforeUpdateMu.Lock()
		followListBeforeUpdateHooks = append(followListBeforeUpdateHooks, followListHook)
		followListBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		followListAfterUpdateMu.Lock()
		followListAfterUpdateHooks = append(followListAfterUpdateHooks, followListHook)
		followListAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		followListBeforeDeleteMu.Lock()
		followListBeforeDeleteHooks = append(followListBeforeDeleteHooks, followListHook)
		followListBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		followListAfterDeleteMu.Lock()
		followListAfterDeleteHooks = append(followListAfterDeleteHooks, followListHook)
		followListAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		followListBeforeUpsertMu.Lock()
		followListBeforeUpsertHooks = append(followListBeforeUpsertHooks, followListHook)
		followListBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		followListAfterUpsertMu.Lock()
		followListAfterUpsertHooks = append(followListAfterUpsertHooks, followListHook)
		followListAfterUpsertMu.Unlock()
	}
}

// OneG returns a single followList record from the query using the global executor.
func (q followListQuery) OneG(ctx context.Context) (*FollowList, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single followList record from the query.
func (q followListQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FollowList, error) {
	o := &FollowList{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for follow_list")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FollowList records from the query using the global executor.
func (q followListQuery) AllG(ctx context.Context) (FollowListSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FollowList records from the query.
func (q followListQuery) All(ctx context.Context, exec boil.ContextExecutor) (FollowListSlice, error) {
	var o []*FollowList

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FollowList slice")
	}

	if len(followListAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FollowList records in the query using the global executor
func (q followListQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FollowList records in the query.
func (q followListQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count follow_list rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q followListQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q followListQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if follow_list exists")
	}

	return count > 0, nil
}

// FollowerUsersMetadatum pointed to by the foreign key.
func (o *FollowList) FollowerUsersMetadatum(mods ...qm.QueryMod) usersMetadatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pub_key\" = ?", o.Follower),
	}

	queryMods = append(queryMods, mods...)

	return UsersMetadata(queryMods...)
}

// FollowingUsersMetadatum pointed to by the foreign key.
func (o *FollowList) FollowingUsersMetadatum(mods ...qm.QueryMod) usersMetadatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pub_key\" = ?", o.Following),
	}

	queryMods = append(queryMods, mods...)

	return UsersMetadata(queryMods...)
}

// LoadFollowerUsersMetadatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followListL) LoadFollowerUsersMetadatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollowList interface{}, mods queries.Applicator) error {
	var slice []*FollowList
	var object *FollowList

	if singular {
		var ok bool
		object, ok = maybeFollowList.(*FollowList)
		if !ok {
			object = new(FollowList)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFollowList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFollowList))
			}
		}
	} else {
		s, ok := maybeFollowList.(*[]*FollowList)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFollowList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFollowList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &followListR{}
		}
		args[object.Follower] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followListR{}
			}

			args[obj.Follower] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users_metadata`),
		qm.WhereIn(`users_metadata.pub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsersMetadatum")
	}

	var resultSlice []*UsersMetadatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsersMetadatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users_metadata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users_metadata")
	}

	if len(usersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowerUsersMetadatum = foreign
		if foreign.R == nil {
			foreign.R = &usersMetadatumR{}
		}
		foreign.R.FollowerFollowLists = append(foreign.R.FollowerFollowLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Follower == foreign.PubKey {
				local.R.FollowerUsersMetadatum = foreign
				if foreign.R == nil {
					foreign.R = &usersMetadatumR{}
				}
				foreign.R.FollowerFollowLists = append(foreign.R.FollowerFollowLists, local)
				break
			}
		}
	}

	return nil
}

// LoadFollowingUsersMetadatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (followListL) LoadFollowingUsersMetadatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeFollowList interface{}, mods queries.Applicator) error {
	var slice []*FollowList
	var object *FollowList

	if singular {
		var ok bool
		object, ok = maybeFollowList.(*FollowList)
		if !ok {
			object = new(FollowList)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFollowList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFollowList))
			}
		}
	} else {
		s, ok := maybeFollowList.(*[]*FollowList)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFollowList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFollowList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &followListR{}
		}
		args[object.Following] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &followListR{}
			}

			args[obj.Following] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users_metadata`),
		qm.WhereIn(`users_metadata.pub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsersMetadatum")
	}

	var resultSlice []*UsersMetadatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsersMetadatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users_metadata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users_metadata")
	}

	if len(usersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowingUsersMetadatum = foreign
		if foreign.R == nil {
			foreign.R = &usersMetadatumR{}
		}
		foreign.R.FollowingFollowLists = append(foreign.R.FollowingFollowLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Following == foreign.PubKey {
				local.R.FollowingUsersMetadatum = foreign
				if foreign.R == nil {
					foreign.R = &usersMetadatumR{}
				}
				foreign.R.FollowingFollowLists = append(foreign.R.FollowingFollowLists, local)
				break
			}
		}
	}

	return nil
}

// SetFollowerUsersMetadatumG of the followList to the related item.
// Sets o.R.FollowerUsersMetadatum to related.
// Adds o to related.R.FollowerFollowLists.
// Uses the global database handle.
func (o *FollowList) SetFollowerUsersMetadatumG(ctx context.Context, insert bool, related *UsersMetadatum) error {
	return o.SetFollowerUsersMetadatum(ctx, boil.GetContextDB(), insert, related)
}

// SetFollowerUsersMetadatum of the followList to the related item.
// Sets o.R.FollowerUsersMetadatum to related.
// Adds o to related.R.FollowerFollowLists.
func (o *FollowList) SetFollowerUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsersMetadatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow_list\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"follower"}),
		strmangle.WhereClause("\"", "\"", 2, followListPrimaryKeyColumns),
	)
	values := []interface{}{related.PubKey, o.Follower, o.Following}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Follower = related.PubKey
	if o.R == nil {
		o.R = &followListR{
			FollowerUsersMetadatum: related,
		}
	} else {
		o.R.FollowerUsersMetadatum = related
	}

	if related.R == nil {
		related.R = &usersMetadatumR{
			FollowerFollowLists: FollowListSlice{o},
		}
	} else {
		related.R.FollowerFollowLists = append(related.R.FollowerFollowLists, o)
	}

	return nil
}

// SetFollowingUsersMetadatumG of the followList to the related item.
// Sets o.R.FollowingUsersMetadatum to related.
// Adds o to related.R.FollowingFollowLists.
// Uses the global database handle.
func (o *FollowList) SetFollowingUsersMetadatumG(ctx context.Context, insert bool, related *UsersMetadatum) error {
	return o.SetFollowingUsersMetadatum(ctx, boil.GetContextDB(), insert, related)
}

// SetFollowingUsersMetadatum of the followList to the related item.
// Sets o.R.FollowingUsersMetadatum to related.
// Adds o to related.R.FollowingFollowLists.
func (o *FollowList) SetFollowingUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsersMetadatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"follow_list\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"following"}),
		strmangle.WhereClause("\"", "\"", 2, followListPrimaryKeyColumns),
	)
	values := []interface{}{related.PubKey, o.Follower, o.Following}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Following = related.PubKey
	if o.R == nil {
		o.R = &followListR{
			FollowingUsersMetadatum: related,
		}
	} else {
		o.R.FollowingUsersMetadatum = related
	}

	if related.R == nil {
		related.R = &usersMetadatumR{
			FollowingFollowLists: FollowListSlice{o},
		}
	} else {
		related.R.FollowingFollowLists = append(related.R.FollowingFollowLists, o)
	}

	return nil
}

// FollowLists retrieves all the records using an executor.
func FollowLists(mods ...qm.QueryMod) followListQuery {
	mods = append(mods, qm.From("\"follow_list\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"follow_list\".*"})
	}

	return followListQuery{q}
}

// FindFollowListG retrieves a single record by ID.
func FindFollowListG(ctx context.Context, follower string, following string, selectCols ...string) (*FollowList, error) {
	return FindFollowList(ctx, boil.GetContextDB(), follower, following, selectCols...)
}

// FindFollowList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFollowList(ctx context.Context, exec boil.ContextExecutor, follower string, following string, selectCols ...string) (*FollowList, error) {
	followListObj := &FollowList{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"follow_list\" where \"follower\"=$1 AND \"following\"=$2", sel,
	)

	q := queries.Raw(query, follower, following)

	err := q.Bind(ctx, exec, followListObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from follow_list")
	}

	if err = followListObj.doAfterSelectHooks(ctx, exec); err != nil {
		return followListObj, err
	}

	return followListObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FollowList) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FollowList) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no follow_list provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followListColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	followListInsertCacheMut.RLock()
	cache, cached := followListInsertCache[key]
	followListInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			followListAllColumns,
			followListColumnsWithDefault,
			followListColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(followListType, followListMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(followListType, followListMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"follow_list\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"follow_list\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into follow_list")
	}

	if !cached {
		followListInsertCacheMut.Lock()
		followListInsertCache[key] = cache
		followListInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FollowList record using the global executor.
// See Update for more documentation.
func (o *FollowList) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FollowList.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FollowList) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	followListUpdateCacheMut.RLock()
	cache, cached := followListUpdateCache[key]
	followListUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			followListAllColumns,
			followListPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update follow_list, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"follow_list\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, followListPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(followListType, followListMapping, append(wl, followListPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update follow_list row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for follow_list")
	}

	if !cached {
		followListUpdateCacheMut.Lock()
		followListUpdateCache[key] = cache
		followListUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q followListQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q followListQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for follow_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for follow_list")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FollowListSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FollowListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"follow_list\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, followListPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in followList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all followList")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FollowList) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FollowList) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no follow_list provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(followListColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	followListUpsertCacheMut.RLock()
	cache, cached := followListUpsertCache[key]
	followListUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			followListAllColumns,
			followListColumnsWithDefault,
			followListColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			followListAllColumns,
			followListPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert follow_list, could not build update column list")
		}

		ret := strmangle.SetComplement(followListAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(followListPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert follow_list, could not build conflict column list")
			}

			conflict = make([]string, len(followListPrimaryKeyColumns))
			copy(conflict, followListPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"follow_list\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(followListType, followListMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(followListType, followListMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert follow_list")
	}

	if !cached {
		followListUpsertCacheMut.Lock()
		followListUpsertCache[key] = cache
		followListUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FollowList record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FollowList) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FollowList record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FollowList) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FollowList provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), followListPrimaryKeyMapping)
	sql := "DELETE FROM \"follow_list\" WHERE \"follower\"=$1 AND \"following\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from follow_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for follow_list")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q followListQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q followListQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no followListQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from follow_list")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for follow_list")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FollowListSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FollowListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(followListBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"follow_list\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followListPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from followList slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for follow_list")
	}

	if len(followListAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FollowList) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no FollowList provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FollowList) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFollowList(ctx, exec, o.Follower, o.Following)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowListSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty FollowListSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FollowListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FollowListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), followListPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"follow_list\".* FROM \"follow_list\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, followListPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FollowListSlice")
	}

	*o = slice

	return nil
}

// FollowListExistsG checks if the FollowList row exists.
func FollowListExistsG(ctx context.Context, follower string, following string) (bool, error) {
	return FollowListExists(ctx, boil.GetContextDB(), follower, following)
}

// FollowListExists checks if the FollowList row exists.
func FollowListExists(ctx context.Context, exec boil.ContextExecutor, follower string, following string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"follow_list\" where \"follower\"=$1 AND \"following\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, follower, following)
	}
	row := exec.QueryRowContext(ctx, sql, follower, following)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if follow_list exists")
	}

	return exists, nil
}

// Exists checks if the FollowList row exists.
func (o *FollowList) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FollowListExists(ctx, exec, o.Follower, o.Following)
}
