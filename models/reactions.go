// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Reaction is an object representing the database table.
type Reaction struct {
	ID                  string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	TextNotesid         null.String       `boil:"text_notesid" json:"text_notesid,omitempty" toml:"text_notesid" yaml:"text_notesid,omitempty"`
	UsersMetadatapubKey null.String       `boil:"users_metadatapub_key" json:"users_metadatapub_key,omitempty" toml:"users_metadatapub_key" yaml:"users_metadatapub_key,omitempty"`
	E                   types.StringArray `boil:"e" json:"e,omitempty" toml:"e" yaml:"e,omitempty"`
	P                   types.StringArray `boil:"p" json:"p,omitempty" toml:"p" yaml:"p,omitempty"`
	A                   types.StringArray `boil:"a" json:"a,omitempty" toml:"a" yaml:"a,omitempty"`
	Event               types.JSON        `boil:"event" json:"event" toml:"event" yaml:"event"`
	K                   types.StringArray `boil:"k" json:"k,omitempty" toml:"k" yaml:"k,omitempty"`
	CreatedAt           time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *reactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReactionColumns = struct {
	ID                  string
	TextNotesid         string
	UsersMetadatapubKey string
	E                   string
	P                   string
	A                   string
	Event               string
	K                   string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "id",
	TextNotesid:         "text_notesid",
	UsersMetadatapubKey: "users_metadatapub_key",
	E:                   "e",
	P:                   "p",
	A:                   "a",
	Event:               "event",
	K:                   "k",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

var ReactionTableColumns = struct {
	ID                  string
	TextNotesid         string
	UsersMetadatapubKey string
	E                   string
	P                   string
	A                   string
	Event               string
	K                   string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
}{
	ID:                  "reactions.id",
	TextNotesid:         "reactions.text_notesid",
	UsersMetadatapubKey: "reactions.users_metadatapub_key",
	E:                   "reactions.e",
	P:                   "reactions.p",
	A:                   "reactions.a",
	Event:               "reactions.event",
	K:                   "reactions.k",
	CreatedAt:           "reactions.created_at",
	UpdatedAt:           "reactions.updated_at",
	DeletedAt:           "reactions.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ReactionWhere = struct {
	ID                  whereHelperstring
	TextNotesid         whereHelpernull_String
	UsersMetadatapubKey whereHelpernull_String
	E                   whereHelpertypes_StringArray
	P                   whereHelpertypes_StringArray
	A                   whereHelpertypes_StringArray
	Event               whereHelpertypes_JSON
	K                   whereHelpertypes_StringArray
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
}{
	ID:                  whereHelperstring{field: "\"reactions\".\"id\""},
	TextNotesid:         whereHelpernull_String{field: "\"reactions\".\"text_notesid\""},
	UsersMetadatapubKey: whereHelpernull_String{field: "\"reactions\".\"users_metadatapub_key\""},
	E:                   whereHelpertypes_StringArray{field: "\"reactions\".\"e\""},
	P:                   whereHelpertypes_StringArray{field: "\"reactions\".\"p\""},
	A:                   whereHelpertypes_StringArray{field: "\"reactions\".\"a\""},
	Event:               whereHelpertypes_JSON{field: "\"reactions\".\"event\""},
	K:                   whereHelpertypes_StringArray{field: "\"reactions\".\"k\""},
	CreatedAt:           whereHelpertime_Time{field: "\"reactions\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"reactions\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"reactions\".\"deleted_at\""},
}

// ReactionRels is where relationship names are stored.
var ReactionRels = struct {
	TextNotesidTextNote               string
	UsersMetadatapubKeyUsersMetadatum string
}{
	TextNotesidTextNote:               "TextNotesidTextNote",
	UsersMetadatapubKeyUsersMetadatum: "UsersMetadatapubKeyUsersMetadatum",
}

// reactionR is where relationships are stored.
type reactionR struct {
	TextNotesidTextNote               *TextNote       `boil:"TextNotesidTextNote" json:"TextNotesidTextNote" toml:"TextNotesidTextNote" yaml:"TextNotesidTextNote"`
	UsersMetadatapubKeyUsersMetadatum *UsersMetadatum `boil:"UsersMetadatapubKeyUsersMetadatum" json:"UsersMetadatapubKeyUsersMetadatum" toml:"UsersMetadatapubKeyUsersMetadatum" yaml:"UsersMetadatapubKeyUsersMetadatum"`
}

// NewStruct creates a new relationship struct
func (*reactionR) NewStruct() *reactionR {
	return &reactionR{}
}

func (r *reactionR) GetTextNotesidTextNote() *TextNote {
	if r == nil {
		return nil
	}
	return r.TextNotesidTextNote
}

func (r *reactionR) GetUsersMetadatapubKeyUsersMetadatum() *UsersMetadatum {
	if r == nil {
		return nil
	}
	return r.UsersMetadatapubKeyUsersMetadatum
}

// reactionL is where Load methods for each relationship are stored.
type reactionL struct{}

var (
	reactionAllColumns            = []string{"id", "text_notesid", "users_metadatapub_key", "e", "p", "a", "event", "k", "created_at", "updated_at", "deleted_at"}
	reactionColumnsWithoutDefault = []string{"id", "event"}
	reactionColumnsWithDefault    = []string{"text_notesid", "users_metadatapub_key", "e", "p", "a", "k", "created_at", "updated_at", "deleted_at"}
	reactionPrimaryKeyColumns     = []string{"id"}
	reactionGeneratedColumns      = []string{}
)

type (
	// ReactionSlice is an alias for a slice of pointers to Reaction.
	// This should almost always be used instead of []Reaction.
	ReactionSlice []*Reaction
	// ReactionHook is the signature for custom Reaction hook methods
	ReactionHook func(context.Context, boil.ContextExecutor, *Reaction) error

	reactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reactionType                 = reflect.TypeOf(&Reaction{})
	reactionMapping              = queries.MakeStructMapping(reactionType)
	reactionPrimaryKeyMapping, _ = queries.BindMapping(reactionType, reactionMapping, reactionPrimaryKeyColumns)
	reactionInsertCacheMut       sync.RWMutex
	reactionInsertCache          = make(map[string]insertCache)
	reactionUpdateCacheMut       sync.RWMutex
	reactionUpdateCache          = make(map[string]updateCache)
	reactionUpsertCacheMut       sync.RWMutex
	reactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reactionAfterSelectMu sync.Mutex
var reactionAfterSelectHooks []ReactionHook

var reactionBeforeInsertMu sync.Mutex
var reactionBeforeInsertHooks []ReactionHook
var reactionAfterInsertMu sync.Mutex
var reactionAfterInsertHooks []ReactionHook

var reactionBeforeUpdateMu sync.Mutex
var reactionBeforeUpdateHooks []ReactionHook
var reactionAfterUpdateMu sync.Mutex
var reactionAfterUpdateHooks []ReactionHook

var reactionBeforeDeleteMu sync.Mutex
var reactionBeforeDeleteHooks []ReactionHook
var reactionAfterDeleteMu sync.Mutex
var reactionAfterDeleteHooks []ReactionHook

var reactionBeforeUpsertMu sync.Mutex
var reactionBeforeUpsertHooks []ReactionHook
var reactionAfterUpsertMu sync.Mutex
var reactionAfterUpsertHooks []ReactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReactionHook registers your hook function for all future operations.
func AddReactionHook(hookPoint boil.HookPoint, reactionHook ReactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reactionAfterSelectMu.Lock()
		reactionAfterSelectHooks = append(reactionAfterSelectHooks, reactionHook)
		reactionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reactionBeforeInsertMu.Lock()
		reactionBeforeInsertHooks = append(reactionBeforeInsertHooks, reactionHook)
		reactionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reactionAfterInsertMu.Lock()
		reactionAfterInsertHooks = append(reactionAfterInsertHooks, reactionHook)
		reactionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reactionBeforeUpdateMu.Lock()
		reactionBeforeUpdateHooks = append(reactionBeforeUpdateHooks, reactionHook)
		reactionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reactionAfterUpdateMu.Lock()
		reactionAfterUpdateHooks = append(reactionAfterUpdateHooks, reactionHook)
		reactionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reactionBeforeDeleteMu.Lock()
		reactionBeforeDeleteHooks = append(reactionBeforeDeleteHooks, reactionHook)
		reactionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reactionAfterDeleteMu.Lock()
		reactionAfterDeleteHooks = append(reactionAfterDeleteHooks, reactionHook)
		reactionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reactionBeforeUpsertMu.Lock()
		reactionBeforeUpsertHooks = append(reactionBeforeUpsertHooks, reactionHook)
		reactionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reactionAfterUpsertMu.Lock()
		reactionAfterUpsertHooks = append(reactionAfterUpsertHooks, reactionHook)
		reactionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single reaction record from the query using the global executor.
func (q reactionQuery) OneG(ctx context.Context) (*Reaction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single reaction record from the query.
func (q reactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reaction, error) {
	o := &Reaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Reaction records from the query using the global executor.
func (q reactionQuery) AllG(ctx context.Context) (ReactionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Reaction records from the query.
func (q reactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReactionSlice, error) {
	var o []*Reaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Reaction slice")
	}

	if len(reactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Reaction records in the query using the global executor
func (q reactionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Reaction records in the query.
func (q reactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reactions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q reactionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q reactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reactions exists")
	}

	return count > 0, nil
}

// TextNotesidTextNote pointed to by the foreign key.
func (o *Reaction) TextNotesidTextNote(mods ...qm.QueryMod) textNoteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TextNotesid),
	}

	queryMods = append(queryMods, mods...)

	return TextNotes(queryMods...)
}

// UsersMetadatapubKeyUsersMetadatum pointed to by the foreign key.
func (o *Reaction) UsersMetadatapubKeyUsersMetadatum(mods ...qm.QueryMod) usersMetadatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pub_key\" = ?", o.UsersMetadatapubKey),
	}

	queryMods = append(queryMods, mods...)

	return UsersMetadata(queryMods...)
}

// LoadTextNotesidTextNote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionL) LoadTextNotesidTextNote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReaction interface{}, mods queries.Applicator) error {
	var slice []*Reaction
	var object *Reaction

	if singular {
		var ok bool
		object, ok = maybeReaction.(*Reaction)
		if !ok {
			object = new(Reaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReaction))
			}
		}
	} else {
		s, ok := maybeReaction.(*[]*Reaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reactionR{}
		}
		if !queries.IsNil(object.TextNotesid) {
			args[object.TextNotesid] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionR{}
			}

			if !queries.IsNil(obj.TextNotesid) {
				args[obj.TextNotesid] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`text_notes`),
		qm.WhereIn(`text_notes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TextNote")
	}

	var resultSlice []*TextNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TextNote")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for text_notes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for text_notes")
	}

	if len(textNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TextNotesidTextNote = foreign
		if foreign.R == nil {
			foreign.R = &textNoteR{}
		}
		foreign.R.TextNotesidReactions = append(foreign.R.TextNotesidReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TextNotesid, foreign.ID) {
				local.R.TextNotesidTextNote = foreign
				if foreign.R == nil {
					foreign.R = &textNoteR{}
				}
				foreign.R.TextNotesidReactions = append(foreign.R.TextNotesidReactions, local)
				break
			}
		}
	}

	return nil
}

// LoadUsersMetadatapubKeyUsersMetadatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reactionL) LoadUsersMetadatapubKeyUsersMetadatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReaction interface{}, mods queries.Applicator) error {
	var slice []*Reaction
	var object *Reaction

	if singular {
		var ok bool
		object, ok = maybeReaction.(*Reaction)
		if !ok {
			object = new(Reaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReaction))
			}
		}
	} else {
		s, ok := maybeReaction.(*[]*Reaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reactionR{}
		}
		if !queries.IsNil(object.UsersMetadatapubKey) {
			args[object.UsersMetadatapubKey] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reactionR{}
			}

			if !queries.IsNil(obj.UsersMetadatapubKey) {
				args[obj.UsersMetadatapubKey] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users_metadata`),
		qm.WhereIn(`users_metadata.pub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsersMetadatum")
	}

	var resultSlice []*UsersMetadatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsersMetadatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users_metadata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users_metadata")
	}

	if len(usersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UsersMetadatapubKeyUsersMetadatum = foreign
		if foreign.R == nil {
			foreign.R = &usersMetadatumR{}
		}
		foreign.R.UsersMetadatapubKeyReactions = append(foreign.R.UsersMetadatapubKeyReactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UsersMetadatapubKey, foreign.PubKey) {
				local.R.UsersMetadatapubKeyUsersMetadatum = foreign
				if foreign.R == nil {
					foreign.R = &usersMetadatumR{}
				}
				foreign.R.UsersMetadatapubKeyReactions = append(foreign.R.UsersMetadatapubKeyReactions, local)
				break
			}
		}
	}

	return nil
}

// SetTextNotesidTextNoteG of the reaction to the related item.
// Sets o.R.TextNotesidTextNote to related.
// Adds o to related.R.TextNotesidReactions.
// Uses the global database handle.
func (o *Reaction) SetTextNotesidTextNoteG(ctx context.Context, insert bool, related *TextNote) error {
	return o.SetTextNotesidTextNote(ctx, boil.GetContextDB(), insert, related)
}

// SetTextNotesidTextNote of the reaction to the related item.
// Sets o.R.TextNotesidTextNote to related.
// Adds o to related.R.TextNotesidReactions.
func (o *Reaction) SetTextNotesidTextNote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TextNote) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"text_notesid"}),
		strmangle.WhereClause("\"", "\"", 2, reactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TextNotesid, related.ID)
	if o.R == nil {
		o.R = &reactionR{
			TextNotesidTextNote: related,
		}
	} else {
		o.R.TextNotesidTextNote = related
	}

	if related.R == nil {
		related.R = &textNoteR{
			TextNotesidReactions: ReactionSlice{o},
		}
	} else {
		related.R.TextNotesidReactions = append(related.R.TextNotesidReactions, o)
	}

	return nil
}

// RemoveTextNotesidTextNoteG relationship.
// Sets o.R.TextNotesidTextNote to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Reaction) RemoveTextNotesidTextNoteG(ctx context.Context, related *TextNote) error {
	return o.RemoveTextNotesidTextNote(ctx, boil.GetContextDB(), related)
}

// RemoveTextNotesidTextNote relationship.
// Sets o.R.TextNotesidTextNote to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Reaction) RemoveTextNotesidTextNote(ctx context.Context, exec boil.ContextExecutor, related *TextNote) error {
	var err error

	queries.SetScanner(&o.TextNotesid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("text_notesid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TextNotesidTextNote = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TextNotesidReactions {
		if queries.Equal(o.TextNotesid, ri.TextNotesid) {
			continue
		}

		ln := len(related.R.TextNotesidReactions)
		if ln > 1 && i < ln-1 {
			related.R.TextNotesidReactions[i] = related.R.TextNotesidReactions[ln-1]
		}
		related.R.TextNotesidReactions = related.R.TextNotesidReactions[:ln-1]
		break
	}
	return nil
}

// SetUsersMetadatapubKeyUsersMetadatumG of the reaction to the related item.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to related.
// Adds o to related.R.UsersMetadatapubKeyReactions.
// Uses the global database handle.
func (o *Reaction) SetUsersMetadatapubKeyUsersMetadatumG(ctx context.Context, insert bool, related *UsersMetadatum) error {
	return o.SetUsersMetadatapubKeyUsersMetadatum(ctx, boil.GetContextDB(), insert, related)
}

// SetUsersMetadatapubKeyUsersMetadatum of the reaction to the related item.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to related.
// Adds o to related.R.UsersMetadatapubKeyReactions.
func (o *Reaction) SetUsersMetadatapubKeyUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsersMetadatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"users_metadatapub_key"}),
		strmangle.WhereClause("\"", "\"", 2, reactionPrimaryKeyColumns),
	)
	values := []interface{}{related.PubKey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UsersMetadatapubKey, related.PubKey)
	if o.R == nil {
		o.R = &reactionR{
			UsersMetadatapubKeyUsersMetadatum: related,
		}
	} else {
		o.R.UsersMetadatapubKeyUsersMetadatum = related
	}

	if related.R == nil {
		related.R = &usersMetadatumR{
			UsersMetadatapubKeyReactions: ReactionSlice{o},
		}
	} else {
		related.R.UsersMetadatapubKeyReactions = append(related.R.UsersMetadatapubKeyReactions, o)
	}

	return nil
}

// RemoveUsersMetadatapubKeyUsersMetadatumG relationship.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Reaction) RemoveUsersMetadatapubKeyUsersMetadatumG(ctx context.Context, related *UsersMetadatum) error {
	return o.RemoveUsersMetadatapubKeyUsersMetadatum(ctx, boil.GetContextDB(), related)
}

// RemoveUsersMetadatapubKeyUsersMetadatum relationship.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Reaction) RemoveUsersMetadatapubKeyUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, related *UsersMetadatum) error {
	var err error

	queries.SetScanner(&o.UsersMetadatapubKey, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("users_metadatapub_key")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UsersMetadatapubKeyUsersMetadatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UsersMetadatapubKeyReactions {
		if queries.Equal(o.UsersMetadatapubKey, ri.UsersMetadatapubKey) {
			continue
		}

		ln := len(related.R.UsersMetadatapubKeyReactions)
		if ln > 1 && i < ln-1 {
			related.R.UsersMetadatapubKeyReactions[i] = related.R.UsersMetadatapubKeyReactions[ln-1]
		}
		related.R.UsersMetadatapubKeyReactions = related.R.UsersMetadatapubKeyReactions[:ln-1]
		break
	}
	return nil
}

// Reactions retrieves all the records using an executor.
func Reactions(mods ...qm.QueryMod) reactionQuery {
	mods = append(mods, qm.From("\"reactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reactions\".*"})
	}

	return reactionQuery{q}
}

// FindReactionG retrieves a single record by ID.
func FindReactionG(ctx context.Context, iD string, selectCols ...string) (*Reaction, error) {
	return FindReaction(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindReaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReaction(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Reaction, error) {
	reactionObj := &Reaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reactions")
	}

	if err = reactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reactionObj, err
	}

	return reactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Reaction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reactions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reactionInsertCacheMut.RLock()
	cache, cached := reactionInsertCache[key]
	reactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reactionAllColumns,
			reactionColumnsWithDefault,
			reactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reactionType, reactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reactions")
	}

	if !cached {
		reactionInsertCacheMut.Lock()
		reactionInsertCache[key] = cache
		reactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Reaction record using the global executor.
// See Update for more documentation.
func (o *Reaction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Reaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reactionUpdateCacheMut.RLock()
	cache, cached := reactionUpdateCache[key]
	reactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reactionAllColumns,
			reactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, append(wl, reactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reactions")
	}

	if !cached {
		reactionUpdateCacheMut.Lock()
		reactionUpdateCache[key] = cache
		reactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q reactionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q reactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reactions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReactionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reaction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Reaction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reactions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reactionUpsertCacheMut.RLock()
	cache, cached := reactionUpsertCache[key]
	reactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reactionAllColumns,
			reactionColumnsWithDefault,
			reactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reactionAllColumns,
			reactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reactions, could not build update column list")
		}

		ret := strmangle.SetComplement(reactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reactionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reactions, could not build conflict column list")
			}

			conflict = make([]string, len(reactionPrimaryKeyColumns))
			copy(conflict, reactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reactionType, reactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reactionType, reactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reactions")
	}

	if !cached {
		reactionUpsertCacheMut.Lock()
		reactionUpsertCache[key] = cache
		reactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Reaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Reaction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Reaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Reaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reactionPrimaryKeyMapping)
	sql := "DELETE FROM \"reactions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q reactionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q reactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReactionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reactions")
	}

	if len(reactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Reaction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Reaction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ReactionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reactions\".* FROM \"reactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReactionSlice")
	}

	*o = slice

	return nil
}

// ReactionExistsG checks if the Reaction row exists.
func ReactionExistsG(ctx context.Context, iD string) (bool, error) {
	return ReactionExists(ctx, boil.GetContextDB(), iD)
}

// ReactionExists checks if the Reaction row exists.
func ReactionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reactions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reactions exists")
	}

	return exists, nil
}

// Exists checks if the Reaction row exists.
func (o *Reaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReactionExists(ctx, exec, o.ID)
}
