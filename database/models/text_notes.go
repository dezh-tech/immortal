// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TextNote is an object representing the database table.
type TextNote struct {
	ID                  string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	E                   types.StringArray `boil:"e" json:"e,omitempty" toml:"e" yaml:"e,omitempty"`
	P                   types.StringArray `boil:"p" json:"p,omitempty" toml:"p" yaml:"p,omitempty"`
	Content             null.String       `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Event               types.JSON        `boil:"event" json:"event" toml:"event" yaml:"event"`
	CreatedAt           time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt           null.Time         `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UsersMetadatapubKey null.String       `boil:"users_metadatapub_key" json:"users_metadatapub_key,omitempty" toml:"users_metadatapub_key" yaml:"users_metadatapub_key,omitempty"`

	R *textNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L textNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TextNoteColumns = struct {
	ID                  string
	E                   string
	P                   string
	Content             string
	Event               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
	UsersMetadatapubKey string
}{
	ID:                  "id",
	E:                   "e",
	P:                   "p",
	Content:             "content",
	Event:               "event",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
	UsersMetadatapubKey: "users_metadatapub_key",
}

var TextNoteTableColumns = struct {
	ID                  string
	E                   string
	P                   string
	Content             string
	Event               string
	CreatedAt           string
	UpdatedAt           string
	DeletedAt           string
	UsersMetadatapubKey string
}{
	ID:                  "text_notes.id",
	E:                   "text_notes.e",
	P:                   "text_notes.p",
	Content:             "text_notes.content",
	Event:               "text_notes.event",
	CreatedAt:           "text_notes.created_at",
	UpdatedAt:           "text_notes.updated_at",
	DeletedAt:           "text_notes.deleted_at",
	UsersMetadatapubKey: "text_notes.users_metadatapub_key",
}

// Generated where

var TextNoteWhere = struct {
	ID                  whereHelperstring
	E                   whereHelpertypes_StringArray
	P                   whereHelpertypes_StringArray
	Content             whereHelpernull_String
	Event               whereHelpertypes_JSON
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	DeletedAt           whereHelpernull_Time
	UsersMetadatapubKey whereHelpernull_String
}{
	ID:                  whereHelperstring{field: "\"text_notes\".\"id\""},
	E:                   whereHelpertypes_StringArray{field: "\"text_notes\".\"e\""},
	P:                   whereHelpertypes_StringArray{field: "\"text_notes\".\"p\""},
	Content:             whereHelpernull_String{field: "\"text_notes\".\"content\""},
	Event:               whereHelpertypes_JSON{field: "\"text_notes\".\"event\""},
	CreatedAt:           whereHelpertime_Time{field: "\"text_notes\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"text_notes\".\"updated_at\""},
	DeletedAt:           whereHelpernull_Time{field: "\"text_notes\".\"deleted_at\""},
	UsersMetadatapubKey: whereHelpernull_String{field: "\"text_notes\".\"users_metadatapub_key\""},
}

// TextNoteRels is where relationship names are stored.
var TextNoteRels = struct {
	UsersMetadatapubKeyUsersMetadatum string
	TextNotesidReactions              string
}{
	UsersMetadatapubKeyUsersMetadatum: "UsersMetadatapubKeyUsersMetadatum",
	TextNotesidReactions:              "TextNotesidReactions",
}

// textNoteR is where relationships are stored.
type textNoteR struct {
	UsersMetadatapubKeyUsersMetadatum *UsersMetadatum `boil:"UsersMetadatapubKeyUsersMetadatum" json:"UsersMetadatapubKeyUsersMetadatum" toml:"UsersMetadatapubKeyUsersMetadatum" yaml:"UsersMetadatapubKeyUsersMetadatum"`
	TextNotesidReactions              ReactionSlice   `boil:"TextNotesidReactions" json:"TextNotesidReactions" toml:"TextNotesidReactions" yaml:"TextNotesidReactions"`
}

// NewStruct creates a new relationship struct
func (*textNoteR) NewStruct() *textNoteR {
	return &textNoteR{}
}

func (r *textNoteR) GetUsersMetadatapubKeyUsersMetadatum() *UsersMetadatum {
	if r == nil {
		return nil
	}
	return r.UsersMetadatapubKeyUsersMetadatum
}

func (r *textNoteR) GetTextNotesidReactions() ReactionSlice {
	if r == nil {
		return nil
	}
	return r.TextNotesidReactions
}

// textNoteL is where Load methods for each relationship are stored.
type textNoteL struct{}

var (
	textNoteAllColumns            = []string{"id", "e", "p", "content", "event", "created_at", "updated_at", "deleted_at", "users_metadatapub_key"}
	textNoteColumnsWithoutDefault = []string{"id", "event"}
	textNoteColumnsWithDefault    = []string{"e", "p", "content", "created_at", "updated_at", "deleted_at", "users_metadatapub_key"}
	textNotePrimaryKeyColumns     = []string{"id"}
	textNoteGeneratedColumns      = []string{}
)

type (
	// TextNoteSlice is an alias for a slice of pointers to TextNote.
	// This should almost always be used instead of []TextNote.
	TextNoteSlice []*TextNote
	// TextNoteHook is the signature for custom TextNote hook methods
	TextNoteHook func(context.Context, boil.ContextExecutor, *TextNote) error

	textNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	textNoteType                 = reflect.TypeOf(&TextNote{})
	textNoteMapping              = queries.MakeStructMapping(textNoteType)
	textNotePrimaryKeyMapping, _ = queries.BindMapping(textNoteType, textNoteMapping, textNotePrimaryKeyColumns)
	textNoteInsertCacheMut       sync.RWMutex
	textNoteInsertCache          = make(map[string]insertCache)
	textNoteUpdateCacheMut       sync.RWMutex
	textNoteUpdateCache          = make(map[string]updateCache)
	textNoteUpsertCacheMut       sync.RWMutex
	textNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var textNoteAfterSelectMu sync.Mutex
var textNoteAfterSelectHooks []TextNoteHook

var textNoteBeforeInsertMu sync.Mutex
var textNoteBeforeInsertHooks []TextNoteHook
var textNoteAfterInsertMu sync.Mutex
var textNoteAfterInsertHooks []TextNoteHook

var textNoteBeforeUpdateMu sync.Mutex
var textNoteBeforeUpdateHooks []TextNoteHook
var textNoteAfterUpdateMu sync.Mutex
var textNoteAfterUpdateHooks []TextNoteHook

var textNoteBeforeDeleteMu sync.Mutex
var textNoteBeforeDeleteHooks []TextNoteHook
var textNoteAfterDeleteMu sync.Mutex
var textNoteAfterDeleteHooks []TextNoteHook

var textNoteBeforeUpsertMu sync.Mutex
var textNoteBeforeUpsertHooks []TextNoteHook
var textNoteAfterUpsertMu sync.Mutex
var textNoteAfterUpsertHooks []TextNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TextNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TextNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TextNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TextNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TextNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TextNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TextNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TextNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TextNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range textNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTextNoteHook registers your hook function for all future operations.
func AddTextNoteHook(hookPoint boil.HookPoint, textNoteHook TextNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		textNoteAfterSelectMu.Lock()
		textNoteAfterSelectHooks = append(textNoteAfterSelectHooks, textNoteHook)
		textNoteAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		textNoteBeforeInsertMu.Lock()
		textNoteBeforeInsertHooks = append(textNoteBeforeInsertHooks, textNoteHook)
		textNoteBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		textNoteAfterInsertMu.Lock()
		textNoteAfterInsertHooks = append(textNoteAfterInsertHooks, textNoteHook)
		textNoteAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		textNoteBeforeUpdateMu.Lock()
		textNoteBeforeUpdateHooks = append(textNoteBeforeUpdateHooks, textNoteHook)
		textNoteBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		textNoteAfterUpdateMu.Lock()
		textNoteAfterUpdateHooks = append(textNoteAfterUpdateHooks, textNoteHook)
		textNoteAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		textNoteBeforeDeleteMu.Lock()
		textNoteBeforeDeleteHooks = append(textNoteBeforeDeleteHooks, textNoteHook)
		textNoteBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		textNoteAfterDeleteMu.Lock()
		textNoteAfterDeleteHooks = append(textNoteAfterDeleteHooks, textNoteHook)
		textNoteAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		textNoteBeforeUpsertMu.Lock()
		textNoteBeforeUpsertHooks = append(textNoteBeforeUpsertHooks, textNoteHook)
		textNoteBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		textNoteAfterUpsertMu.Lock()
		textNoteAfterUpsertHooks = append(textNoteAfterUpsertHooks, textNoteHook)
		textNoteAfterUpsertMu.Unlock()
	}
}

// OneG returns a single textNote record from the query using the global executor.
func (q textNoteQuery) OneG(ctx context.Context) (*TextNote, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single textNote record from the query.
func (q textNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TextNote, error) {
	o := &TextNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for text_notes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TextNote records from the query using the global executor.
func (q textNoteQuery) AllG(ctx context.Context) (TextNoteSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TextNote records from the query.
func (q textNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (TextNoteSlice, error) {
	var o []*TextNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to TextNote slice")
	}

	if len(textNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TextNote records in the query using the global executor
func (q textNoteQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TextNote records in the query.
func (q textNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count text_notes rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q textNoteQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q textNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if text_notes exists")
	}

	return count > 0, nil
}

// UsersMetadatapubKeyUsersMetadatum pointed to by the foreign key.
func (o *TextNote) UsersMetadatapubKeyUsersMetadatum(mods ...qm.QueryMod) usersMetadatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"pub_key\" = ?", o.UsersMetadatapubKey),
	}

	queryMods = append(queryMods, mods...)

	return UsersMetadata(queryMods...)
}

// TextNotesidReactions retrieves all the reaction's Reactions with an executor via text_notesid column.
func (o *TextNote) TextNotesidReactions(mods ...qm.QueryMod) reactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactions\".\"text_notesid\"=?", o.ID),
	)

	return Reactions(queryMods...)
}

// LoadUsersMetadatapubKeyUsersMetadatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (textNoteL) LoadUsersMetadatapubKeyUsersMetadatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTextNote interface{}, mods queries.Applicator) error {
	var slice []*TextNote
	var object *TextNote

	if singular {
		var ok bool
		object, ok = maybeTextNote.(*TextNote)
		if !ok {
			object = new(TextNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTextNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTextNote))
			}
		}
	} else {
		s, ok := maybeTextNote.(*[]*TextNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTextNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTextNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &textNoteR{}
		}
		if !queries.IsNil(object.UsersMetadatapubKey) {
			args[object.UsersMetadatapubKey] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &textNoteR{}
			}

			if !queries.IsNil(obj.UsersMetadatapubKey) {
				args[obj.UsersMetadatapubKey] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users_metadata`),
		qm.WhereIn(`users_metadata.pub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UsersMetadatum")
	}

	var resultSlice []*UsersMetadatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UsersMetadatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users_metadata")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users_metadata")
	}

	if len(usersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UsersMetadatapubKeyUsersMetadatum = foreign
		if foreign.R == nil {
			foreign.R = &usersMetadatumR{}
		}
		foreign.R.UsersMetadatapubKeyTextNotes = append(foreign.R.UsersMetadatapubKeyTextNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UsersMetadatapubKey, foreign.PubKey) {
				local.R.UsersMetadatapubKeyUsersMetadatum = foreign
				if foreign.R == nil {
					foreign.R = &usersMetadatumR{}
				}
				foreign.R.UsersMetadatapubKeyTextNotes = append(foreign.R.UsersMetadatapubKeyTextNotes, local)
				break
			}
		}
	}

	return nil
}

// LoadTextNotesidReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (textNoteL) LoadTextNotesidReactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTextNote interface{}, mods queries.Applicator) error {
	var slice []*TextNote
	var object *TextNote

	if singular {
		var ok bool
		object, ok = maybeTextNote.(*TextNote)
		if !ok {
			object = new(TextNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTextNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTextNote))
			}
		}
	} else {
		s, ok := maybeTextNote.(*[]*TextNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTextNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTextNote))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &textNoteR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &textNoteR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reactions`),
		qm.WhereIn(`reactions.text_notesid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactions")
	}

	var resultSlice []*Reaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactions")
	}

	if len(reactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TextNotesidReactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionR{}
			}
			foreign.R.TextNotesidTextNote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TextNotesid) {
				local.R.TextNotesidReactions = append(local.R.TextNotesidReactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionR{}
				}
				foreign.R.TextNotesidTextNote = local
				break
			}
		}
	}

	return nil
}

// SetUsersMetadatapubKeyUsersMetadatumG of the textNote to the related item.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to related.
// Adds o to related.R.UsersMetadatapubKeyTextNotes.
// Uses the global database handle.
func (o *TextNote) SetUsersMetadatapubKeyUsersMetadatumG(ctx context.Context, insert bool, related *UsersMetadatum) error {
	return o.SetUsersMetadatapubKeyUsersMetadatum(ctx, boil.GetContextDB(), insert, related)
}

// SetUsersMetadatapubKeyUsersMetadatum of the textNote to the related item.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to related.
// Adds o to related.R.UsersMetadatapubKeyTextNotes.
func (o *TextNote) SetUsersMetadatapubKeyUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UsersMetadatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"text_notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"users_metadatapub_key"}),
		strmangle.WhereClause("\"", "\"", 2, textNotePrimaryKeyColumns),
	)
	values := []interface{}{related.PubKey, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UsersMetadatapubKey, related.PubKey)
	if o.R == nil {
		o.R = &textNoteR{
			UsersMetadatapubKeyUsersMetadatum: related,
		}
	} else {
		o.R.UsersMetadatapubKeyUsersMetadatum = related
	}

	if related.R == nil {
		related.R = &usersMetadatumR{
			UsersMetadatapubKeyTextNotes: TextNoteSlice{o},
		}
	} else {
		related.R.UsersMetadatapubKeyTextNotes = append(related.R.UsersMetadatapubKeyTextNotes, o)
	}

	return nil
}

// RemoveUsersMetadatapubKeyUsersMetadatumG relationship.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *TextNote) RemoveUsersMetadatapubKeyUsersMetadatumG(ctx context.Context, related *UsersMetadatum) error {
	return o.RemoveUsersMetadatapubKeyUsersMetadatum(ctx, boil.GetContextDB(), related)
}

// RemoveUsersMetadatapubKeyUsersMetadatum relationship.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TextNote) RemoveUsersMetadatapubKeyUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, related *UsersMetadatum) error {
	var err error

	queries.SetScanner(&o.UsersMetadatapubKey, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("users_metadatapub_key")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UsersMetadatapubKeyUsersMetadatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UsersMetadatapubKeyTextNotes {
		if queries.Equal(o.UsersMetadatapubKey, ri.UsersMetadatapubKey) {
			continue
		}

		ln := len(related.R.UsersMetadatapubKeyTextNotes)
		if ln > 1 && i < ln-1 {
			related.R.UsersMetadatapubKeyTextNotes[i] = related.R.UsersMetadatapubKeyTextNotes[ln-1]
		}
		related.R.UsersMetadatapubKeyTextNotes = related.R.UsersMetadatapubKeyTextNotes[:ln-1]
		break
	}
	return nil
}

// AddTextNotesidReactionsG adds the given related objects to the existing relationships
// of the text_note, optionally inserting them as new records.
// Appends related to o.R.TextNotesidReactions.
// Sets related.R.TextNotesidTextNote appropriately.
// Uses the global database handle.
func (o *TextNote) AddTextNotesidReactionsG(ctx context.Context, insert bool, related ...*Reaction) error {
	return o.AddTextNotesidReactions(ctx, boil.GetContextDB(), insert, related...)
}

// AddTextNotesidReactions adds the given related objects to the existing relationships
// of the text_note, optionally inserting them as new records.
// Appends related to o.R.TextNotesidReactions.
// Sets related.R.TextNotesidTextNote appropriately.
func (o *TextNote) AddTextNotesidReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TextNotesid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"text_notesid"}),
				strmangle.WhereClause("\"", "\"", 2, reactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TextNotesid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &textNoteR{
			TextNotesidReactions: related,
		}
	} else {
		o.R.TextNotesidReactions = append(o.R.TextNotesidReactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionR{
				TextNotesidTextNote: o,
			}
		} else {
			rel.R.TextNotesidTextNote = o
		}
	}
	return nil
}

// SetTextNotesidReactionsG removes all previously related items of the
// text_note replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TextNotesidTextNote's TextNotesidReactions accordingly.
// Replaces o.R.TextNotesidReactions with related.
// Sets related.R.TextNotesidTextNote's TextNotesidReactions accordingly.
// Uses the global database handle.
func (o *TextNote) SetTextNotesidReactionsG(ctx context.Context, insert bool, related ...*Reaction) error {
	return o.SetTextNotesidReactions(ctx, boil.GetContextDB(), insert, related...)
}

// SetTextNotesidReactions removes all previously related items of the
// text_note replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TextNotesidTextNote's TextNotesidReactions accordingly.
// Replaces o.R.TextNotesidReactions with related.
// Sets related.R.TextNotesidTextNote's TextNotesidReactions accordingly.
func (o *TextNote) SetTextNotesidReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	query := "update \"reactions\" set \"text_notesid\" = null where \"text_notesid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TextNotesidReactions {
			queries.SetScanner(&rel.TextNotesid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TextNotesidTextNote = nil
		}
		o.R.TextNotesidReactions = nil
	}

	return o.AddTextNotesidReactions(ctx, exec, insert, related...)
}

// RemoveTextNotesidReactionsG relationships from objects passed in.
// Removes related items from R.TextNotesidReactions (uses pointer comparison, removal does not keep order)
// Sets related.R.TextNotesidTextNote.
// Uses the global database handle.
func (o *TextNote) RemoveTextNotesidReactionsG(ctx context.Context, related ...*Reaction) error {
	return o.RemoveTextNotesidReactions(ctx, boil.GetContextDB(), related...)
}

// RemoveTextNotesidReactions relationships from objects passed in.
// Removes related items from R.TextNotesidReactions (uses pointer comparison, removal does not keep order)
// Sets related.R.TextNotesidTextNote.
func (o *TextNote) RemoveTextNotesidReactions(ctx context.Context, exec boil.ContextExecutor, related ...*Reaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TextNotesid, nil)
		if rel.R != nil {
			rel.R.TextNotesidTextNote = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("text_notesid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TextNotesidReactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.TextNotesidReactions)
			if ln > 1 && i < ln-1 {
				o.R.TextNotesidReactions[i] = o.R.TextNotesidReactions[ln-1]
			}
			o.R.TextNotesidReactions = o.R.TextNotesidReactions[:ln-1]
			break
		}
	}

	return nil
}

// TextNotes retrieves all the records using an executor.
func TextNotes(mods ...qm.QueryMod) textNoteQuery {
	mods = append(mods, qm.From("\"text_notes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"text_notes\".*"})
	}

	return textNoteQuery{q}
}

// FindTextNoteG retrieves a single record by ID.
func FindTextNoteG(ctx context.Context, iD string, selectCols ...string) (*TextNote, error) {
	return FindTextNote(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTextNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTextNote(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TextNote, error) {
	textNoteObj := &TextNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"text_notes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, textNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from text_notes")
	}

	if err = textNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return textNoteObj, err
	}

	return textNoteObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TextNote) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TextNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no text_notes provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(textNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	textNoteInsertCacheMut.RLock()
	cache, cached := textNoteInsertCache[key]
	textNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			textNoteAllColumns,
			textNoteColumnsWithDefault,
			textNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(textNoteType, textNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(textNoteType, textNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"text_notes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"text_notes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into text_notes")
	}

	if !cached {
		textNoteInsertCacheMut.Lock()
		textNoteInsertCache[key] = cache
		textNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TextNote record using the global executor.
// See Update for more documentation.
func (o *TextNote) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TextNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TextNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	textNoteUpdateCacheMut.RLock()
	cache, cached := textNoteUpdateCache[key]
	textNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			textNoteAllColumns,
			textNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update text_notes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"text_notes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, textNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(textNoteType, textNoteMapping, append(wl, textNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update text_notes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for text_notes")
	}

	if !cached {
		textNoteUpdateCacheMut.Lock()
		textNoteUpdateCache[key] = cache
		textNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q textNoteQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q textNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for text_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for text_notes")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TextNoteSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TextNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), textNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"text_notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, textNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in textNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all textNote")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TextNote) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TextNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("database: no text_notes provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(textNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	textNoteUpsertCacheMut.RLock()
	cache, cached := textNoteUpsertCache[key]
	textNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			textNoteAllColumns,
			textNoteColumnsWithDefault,
			textNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			textNoteAllColumns,
			textNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert text_notes, could not build update column list")
		}

		ret := strmangle.SetComplement(textNoteAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(textNotePrimaryKeyColumns) == 0 {
				return errors.New("database: unable to upsert text_notes, could not build conflict column list")
			}

			conflict = make([]string, len(textNotePrimaryKeyColumns))
			copy(conflict, textNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"text_notes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(textNoteType, textNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(textNoteType, textNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert text_notes")
	}

	if !cached {
		textNoteUpsertCacheMut.Lock()
		textNoteUpsertCache[key] = cache
		textNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TextNote record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TextNote) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single TextNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TextNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no TextNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), textNotePrimaryKeyMapping)
	sql := "DELETE FROM \"text_notes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from text_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for text_notes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q textNoteQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q textNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no textNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from text_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for text_notes")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TextNoteSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TextNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(textNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), textNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"text_notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, textNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from textNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for text_notes")
	}

	if len(textNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TextNote) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no TextNote provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TextNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTextNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TextNoteSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty TextNoteSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TextNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TextNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), textNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"text_notes\".* FROM \"text_notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, textNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in TextNoteSlice")
	}

	*o = slice

	return nil
}

// TextNoteExistsG checks if the TextNote row exists.
func TextNoteExistsG(ctx context.Context, iD string) (bool, error) {
	return TextNoteExists(ctx, boil.GetContextDB(), iD)
}

// TextNoteExists checks if the TextNote row exists.
func TextNoteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"text_notes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if text_notes exists")
	}

	return exists, nil
}

// Exists checks if the TextNote row exists.
func (o *TextNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TextNoteExists(ctx, exec, o.ID)
}
