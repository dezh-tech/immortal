// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersMetadatum is an object representing the database table.
type UsersMetadatum struct {
	PubKey          string      `boil:"pub_key" json:"pub_key" toml:"pub_key" yaml:"pub_key"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt       null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Content         null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	FollowListEvent null.JSON   `boil:"follow_list_event" json:"follow_list_event,omitempty" toml:"follow_list_event" yaml:"follow_list_event,omitempty"`

	R *usersMetadatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersMetadatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersMetadatumColumns = struct {
	PubKey          string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	Content         string
	FollowListEvent string
}{
	PubKey:          "pub_key",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
	Content:         "content",
	FollowListEvent: "follow_list_event",
}

var UsersMetadatumTableColumns = struct {
	PubKey          string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	Content         string
	FollowListEvent string
}{
	PubKey:          "users_metadata.pub_key",
	CreatedAt:       "users_metadata.created_at",
	UpdatedAt:       "users_metadata.updated_at",
	DeletedAt:       "users_metadata.deleted_at",
	Content:         "users_metadata.content",
	FollowListEvent: "users_metadata.follow_list_event",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UsersMetadatumWhere = struct {
	PubKey          whereHelperstring
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DeletedAt       whereHelpernull_Time
	Content         whereHelpernull_String
	FollowListEvent whereHelpernull_JSON
}{
	PubKey:          whereHelperstring{field: "\"users_metadata\".\"pub_key\""},
	CreatedAt:       whereHelpertime_Time{field: "\"users_metadata\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"users_metadata\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"users_metadata\".\"deleted_at\""},
	Content:         whereHelpernull_String{field: "\"users_metadata\".\"content\""},
	FollowListEvent: whereHelpernull_JSON{field: "\"users_metadata\".\"follow_list_event\""},
}

// UsersMetadatumRels is where relationship names are stored.
var UsersMetadatumRels = struct {
	FollowerFollowLists          string
	FollowingFollowLists         string
	UsersMetadatapubKeyReactions string
	UsersMetadatapubKeyTextNotes string
}{
	FollowerFollowLists:          "FollowerFollowLists",
	FollowingFollowLists:         "FollowingFollowLists",
	UsersMetadatapubKeyReactions: "UsersMetadatapubKeyReactions",
	UsersMetadatapubKeyTextNotes: "UsersMetadatapubKeyTextNotes",
}

// usersMetadatumR is where relationships are stored.
type usersMetadatumR struct {
	FollowerFollowLists          FollowListSlice `boil:"FollowerFollowLists" json:"FollowerFollowLists" toml:"FollowerFollowLists" yaml:"FollowerFollowLists"`
	FollowingFollowLists         FollowListSlice `boil:"FollowingFollowLists" json:"FollowingFollowLists" toml:"FollowingFollowLists" yaml:"FollowingFollowLists"`
	UsersMetadatapubKeyReactions ReactionSlice   `boil:"UsersMetadatapubKeyReactions" json:"UsersMetadatapubKeyReactions" toml:"UsersMetadatapubKeyReactions" yaml:"UsersMetadatapubKeyReactions"`
	UsersMetadatapubKeyTextNotes TextNoteSlice   `boil:"UsersMetadatapubKeyTextNotes" json:"UsersMetadatapubKeyTextNotes" toml:"UsersMetadatapubKeyTextNotes" yaml:"UsersMetadatapubKeyTextNotes"`
}

// NewStruct creates a new relationship struct
func (*usersMetadatumR) NewStruct() *usersMetadatumR {
	return &usersMetadatumR{}
}

func (r *usersMetadatumR) GetFollowerFollowLists() FollowListSlice {
	if r == nil {
		return nil
	}
	return r.FollowerFollowLists
}

func (r *usersMetadatumR) GetFollowingFollowLists() FollowListSlice {
	if r == nil {
		return nil
	}
	return r.FollowingFollowLists
}

func (r *usersMetadatumR) GetUsersMetadatapubKeyReactions() ReactionSlice {
	if r == nil {
		return nil
	}
	return r.UsersMetadatapubKeyReactions
}

func (r *usersMetadatumR) GetUsersMetadatapubKeyTextNotes() TextNoteSlice {
	if r == nil {
		return nil
	}
	return r.UsersMetadatapubKeyTextNotes
}

// usersMetadatumL is where Load methods for each relationship are stored.
type usersMetadatumL struct{}

var (
	usersMetadatumAllColumns            = []string{"pub_key", "created_at", "updated_at", "deleted_at", "content", "follow_list_event"}
	usersMetadatumColumnsWithoutDefault = []string{"pub_key"}
	usersMetadatumColumnsWithDefault    = []string{"created_at", "updated_at", "deleted_at", "content", "follow_list_event"}
	usersMetadatumPrimaryKeyColumns     = []string{"pub_key"}
	usersMetadatumGeneratedColumns      = []string{}
)

type (
	// UsersMetadatumSlice is an alias for a slice of pointers to UsersMetadatum.
	// This should almost always be used instead of []UsersMetadatum.
	UsersMetadatumSlice []*UsersMetadatum
	// UsersMetadatumHook is the signature for custom UsersMetadatum hook methods
	UsersMetadatumHook func(context.Context, boil.ContextExecutor, *UsersMetadatum) error

	usersMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersMetadatumType                 = reflect.TypeOf(&UsersMetadatum{})
	usersMetadatumMapping              = queries.MakeStructMapping(usersMetadatumType)
	usersMetadatumPrimaryKeyMapping, _ = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, usersMetadatumPrimaryKeyColumns)
	usersMetadatumInsertCacheMut       sync.RWMutex
	usersMetadatumInsertCache          = make(map[string]insertCache)
	usersMetadatumUpdateCacheMut       sync.RWMutex
	usersMetadatumUpdateCache          = make(map[string]updateCache)
	usersMetadatumUpsertCacheMut       sync.RWMutex
	usersMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersMetadatumAfterSelectMu sync.Mutex
var usersMetadatumAfterSelectHooks []UsersMetadatumHook

var usersMetadatumBeforeInsertMu sync.Mutex
var usersMetadatumBeforeInsertHooks []UsersMetadatumHook
var usersMetadatumAfterInsertMu sync.Mutex
var usersMetadatumAfterInsertHooks []UsersMetadatumHook

var usersMetadatumBeforeUpdateMu sync.Mutex
var usersMetadatumBeforeUpdateHooks []UsersMetadatumHook
var usersMetadatumAfterUpdateMu sync.Mutex
var usersMetadatumAfterUpdateHooks []UsersMetadatumHook

var usersMetadatumBeforeDeleteMu sync.Mutex
var usersMetadatumBeforeDeleteHooks []UsersMetadatumHook
var usersMetadatumAfterDeleteMu sync.Mutex
var usersMetadatumAfterDeleteHooks []UsersMetadatumHook

var usersMetadatumBeforeUpsertMu sync.Mutex
var usersMetadatumBeforeUpsertHooks []UsersMetadatumHook
var usersMetadatumAfterUpsertMu sync.Mutex
var usersMetadatumAfterUpsertHooks []UsersMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersMetadatumHook registers your hook function for all future operations.
func AddUsersMetadatumHook(hookPoint boil.HookPoint, usersMetadatumHook UsersMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersMetadatumAfterSelectMu.Lock()
		usersMetadatumAfterSelectHooks = append(usersMetadatumAfterSelectHooks, usersMetadatumHook)
		usersMetadatumAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersMetadatumBeforeInsertMu.Lock()
		usersMetadatumBeforeInsertHooks = append(usersMetadatumBeforeInsertHooks, usersMetadatumHook)
		usersMetadatumBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersMetadatumAfterInsertMu.Lock()
		usersMetadatumAfterInsertHooks = append(usersMetadatumAfterInsertHooks, usersMetadatumHook)
		usersMetadatumAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersMetadatumBeforeUpdateMu.Lock()
		usersMetadatumBeforeUpdateHooks = append(usersMetadatumBeforeUpdateHooks, usersMetadatumHook)
		usersMetadatumBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersMetadatumAfterUpdateMu.Lock()
		usersMetadatumAfterUpdateHooks = append(usersMetadatumAfterUpdateHooks, usersMetadatumHook)
		usersMetadatumAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersMetadatumBeforeDeleteMu.Lock()
		usersMetadatumBeforeDeleteHooks = append(usersMetadatumBeforeDeleteHooks, usersMetadatumHook)
		usersMetadatumBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersMetadatumAfterDeleteMu.Lock()
		usersMetadatumAfterDeleteHooks = append(usersMetadatumAfterDeleteHooks, usersMetadatumHook)
		usersMetadatumAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersMetadatumBeforeUpsertMu.Lock()
		usersMetadatumBeforeUpsertHooks = append(usersMetadatumBeforeUpsertHooks, usersMetadatumHook)
		usersMetadatumBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersMetadatumAfterUpsertMu.Lock()
		usersMetadatumAfterUpsertHooks = append(usersMetadatumAfterUpsertHooks, usersMetadatumHook)
		usersMetadatumAfterUpsertMu.Unlock()
	}
}

// OneG returns a single usersMetadatum record from the query using the global executor.
func (q usersMetadatumQuery) OneG(ctx context.Context) (*UsersMetadatum, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single usersMetadatum record from the query.
func (q usersMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersMetadatum, error) {
	o := &UsersMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for users_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UsersMetadatum records from the query using the global executor.
func (q usersMetadatumQuery) AllG(ctx context.Context) (UsersMetadatumSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UsersMetadatum records from the query.
func (q usersMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersMetadatumSlice, error) {
	var o []*UsersMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to UsersMetadatum slice")
	}

	if len(usersMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UsersMetadatum records in the query using the global executor
func (q usersMetadatumQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UsersMetadatum records in the query.
func (q usersMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count users_metadata rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q usersMetadatumQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q usersMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if users_metadata exists")
	}

	return count > 0, nil
}

// FollowerFollowLists retrieves all the follow_list's FollowLists with an executor via follower column.
func (o *UsersMetadatum) FollowerFollowLists(mods ...qm.QueryMod) followListQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follow_list\".\"follower\"=?", o.PubKey),
	)

	return FollowLists(queryMods...)
}

// FollowingFollowLists retrieves all the follow_list's FollowLists with an executor via following column.
func (o *UsersMetadatum) FollowingFollowLists(mods ...qm.QueryMod) followListQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"follow_list\".\"following\"=?", o.PubKey),
	)

	return FollowLists(queryMods...)
}

// UsersMetadatapubKeyReactions retrieves all the reaction's Reactions with an executor via users_metadatapub_key column.
func (o *UsersMetadatum) UsersMetadatapubKeyReactions(mods ...qm.QueryMod) reactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reactions\".\"users_metadatapub_key\"=?", o.PubKey),
	)

	return Reactions(queryMods...)
}

// UsersMetadatapubKeyTextNotes retrieves all the text_note's TextNotes with an executor via users_metadatapub_key column.
func (o *UsersMetadatum) UsersMetadatapubKeyTextNotes(mods ...qm.QueryMod) textNoteQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"text_notes\".\"users_metadatapub_key\"=?", o.PubKey),
	)

	return TextNotes(queryMods...)
}

// LoadFollowerFollowLists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usersMetadatumL) LoadFollowerFollowLists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersMetadatum interface{}, mods queries.Applicator) error {
	var slice []*UsersMetadatum
	var object *UsersMetadatum

	if singular {
		var ok bool
		object, ok = maybeUsersMetadatum.(*UsersMetadatum)
		if !ok {
			object = new(UsersMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersMetadatum))
			}
		}
	} else {
		s, ok := maybeUsersMetadatum.(*[]*UsersMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersMetadatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersMetadatumR{}
		}
		args[object.PubKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersMetadatumR{}
			}
			args[obj.PubKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`follow_list`),
		qm.WhereIn(`follow_list.follower in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follow_list")
	}

	var resultSlice []*FollowList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follow_list")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follow_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follow_list")
	}

	if len(followListAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowerFollowLists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followListR{}
			}
			foreign.R.FollowerUsersMetadatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PubKey == foreign.Follower {
				local.R.FollowerFollowLists = append(local.R.FollowerFollowLists, foreign)
				if foreign.R == nil {
					foreign.R = &followListR{}
				}
				foreign.R.FollowerUsersMetadatum = local
				break
			}
		}
	}

	return nil
}

// LoadFollowingFollowLists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usersMetadatumL) LoadFollowingFollowLists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersMetadatum interface{}, mods queries.Applicator) error {
	var slice []*UsersMetadatum
	var object *UsersMetadatum

	if singular {
		var ok bool
		object, ok = maybeUsersMetadatum.(*UsersMetadatum)
		if !ok {
			object = new(UsersMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersMetadatum))
			}
		}
	} else {
		s, ok := maybeUsersMetadatum.(*[]*UsersMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersMetadatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersMetadatumR{}
		}
		args[object.PubKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersMetadatumR{}
			}
			args[obj.PubKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`follow_list`),
		qm.WhereIn(`follow_list.following in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load follow_list")
	}

	var resultSlice []*FollowList
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice follow_list")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on follow_list")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for follow_list")
	}

	if len(followListAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FollowingFollowLists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &followListR{}
			}
			foreign.R.FollowingUsersMetadatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PubKey == foreign.Following {
				local.R.FollowingFollowLists = append(local.R.FollowingFollowLists, foreign)
				if foreign.R == nil {
					foreign.R = &followListR{}
				}
				foreign.R.FollowingUsersMetadatum = local
				break
			}
		}
	}

	return nil
}

// LoadUsersMetadatapubKeyReactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usersMetadatumL) LoadUsersMetadatapubKeyReactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersMetadatum interface{}, mods queries.Applicator) error {
	var slice []*UsersMetadatum
	var object *UsersMetadatum

	if singular {
		var ok bool
		object, ok = maybeUsersMetadatum.(*UsersMetadatum)
		if !ok {
			object = new(UsersMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersMetadatum))
			}
		}
	} else {
		s, ok := maybeUsersMetadatum.(*[]*UsersMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersMetadatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersMetadatumR{}
		}
		args[object.PubKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersMetadatumR{}
			}
			args[obj.PubKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reactions`),
		qm.WhereIn(`reactions.users_metadatapub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reactions")
	}

	var resultSlice []*Reaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reactions")
	}

	if len(reactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UsersMetadatapubKeyReactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reactionR{}
			}
			foreign.R.UsersMetadatapubKeyUsersMetadatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PubKey, foreign.UsersMetadatapubKey) {
				local.R.UsersMetadatapubKeyReactions = append(local.R.UsersMetadatapubKeyReactions, foreign)
				if foreign.R == nil {
					foreign.R = &reactionR{}
				}
				foreign.R.UsersMetadatapubKeyUsersMetadatum = local
				break
			}
		}
	}

	return nil
}

// LoadUsersMetadatapubKeyTextNotes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (usersMetadatumL) LoadUsersMetadatapubKeyTextNotes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersMetadatum interface{}, mods queries.Applicator) error {
	var slice []*UsersMetadatum
	var object *UsersMetadatum

	if singular {
		var ok bool
		object, ok = maybeUsersMetadatum.(*UsersMetadatum)
		if !ok {
			object = new(UsersMetadatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersMetadatum))
			}
		}
	} else {
		s, ok := maybeUsersMetadatum.(*[]*UsersMetadatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersMetadatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersMetadatum))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersMetadatumR{}
		}
		args[object.PubKey] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersMetadatumR{}
			}
			args[obj.PubKey] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`text_notes`),
		qm.WhereIn(`text_notes.users_metadatapub_key in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load text_notes")
	}

	var resultSlice []*TextNote
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice text_notes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on text_notes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for text_notes")
	}

	if len(textNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UsersMetadatapubKeyTextNotes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &textNoteR{}
			}
			foreign.R.UsersMetadatapubKeyUsersMetadatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PubKey, foreign.UsersMetadatapubKey) {
				local.R.UsersMetadatapubKeyTextNotes = append(local.R.UsersMetadatapubKeyTextNotes, foreign)
				if foreign.R == nil {
					foreign.R = &textNoteR{}
				}
				foreign.R.UsersMetadatapubKeyUsersMetadatum = local
				break
			}
		}
	}

	return nil
}

// AddFollowerFollowListsG adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.FollowerFollowLists.
// Sets related.R.FollowerUsersMetadatum appropriately.
// Uses the global database handle.
func (o *UsersMetadatum) AddFollowerFollowListsG(ctx context.Context, insert bool, related ...*FollowList) error {
	return o.AddFollowerFollowLists(ctx, boil.GetContextDB(), insert, related...)
}

// AddFollowerFollowLists adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.FollowerFollowLists.
// Sets related.R.FollowerUsersMetadatum appropriately.
func (o *UsersMetadatum) AddFollowerFollowLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FollowList) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Follower = o.PubKey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follow_list\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"follower"}),
				strmangle.WhereClause("\"", "\"", 2, followListPrimaryKeyColumns),
			)
			values := []interface{}{o.PubKey, rel.Follower, rel.Following}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Follower = o.PubKey
		}
	}

	if o.R == nil {
		o.R = &usersMetadatumR{
			FollowerFollowLists: related,
		}
	} else {
		o.R.FollowerFollowLists = append(o.R.FollowerFollowLists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followListR{
				FollowerUsersMetadatum: o,
			}
		} else {
			rel.R.FollowerUsersMetadatum = o
		}
	}
	return nil
}

// AddFollowingFollowListsG adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.FollowingFollowLists.
// Sets related.R.FollowingUsersMetadatum appropriately.
// Uses the global database handle.
func (o *UsersMetadatum) AddFollowingFollowListsG(ctx context.Context, insert bool, related ...*FollowList) error {
	return o.AddFollowingFollowLists(ctx, boil.GetContextDB(), insert, related...)
}

// AddFollowingFollowLists adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.FollowingFollowLists.
// Sets related.R.FollowingUsersMetadatum appropriately.
func (o *UsersMetadatum) AddFollowingFollowLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FollowList) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Following = o.PubKey
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"follow_list\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"following"}),
				strmangle.WhereClause("\"", "\"", 2, followListPrimaryKeyColumns),
			)
			values := []interface{}{o.PubKey, rel.Follower, rel.Following}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Following = o.PubKey
		}
	}

	if o.R == nil {
		o.R = &usersMetadatumR{
			FollowingFollowLists: related,
		}
	} else {
		o.R.FollowingFollowLists = append(o.R.FollowingFollowLists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &followListR{
				FollowingUsersMetadatum: o,
			}
		} else {
			rel.R.FollowingUsersMetadatum = o
		}
	}
	return nil
}

// AddUsersMetadatapubKeyReactionsG adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.UsersMetadatapubKeyReactions.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum appropriately.
// Uses the global database handle.
func (o *UsersMetadatum) AddUsersMetadatapubKeyReactionsG(ctx context.Context, insert bool, related ...*Reaction) error {
	return o.AddUsersMetadatapubKeyReactions(ctx, boil.GetContextDB(), insert, related...)
}

// AddUsersMetadatapubKeyReactions adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.UsersMetadatapubKeyReactions.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum appropriately.
func (o *UsersMetadatum) AddUsersMetadatapubKeyReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UsersMetadatapubKey, o.PubKey)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"users_metadatapub_key"}),
				strmangle.WhereClause("\"", "\"", 2, reactionPrimaryKeyColumns),
			)
			values := []interface{}{o.PubKey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UsersMetadatapubKey, o.PubKey)
		}
	}

	if o.R == nil {
		o.R = &usersMetadatumR{
			UsersMetadatapubKeyReactions: related,
		}
	} else {
		o.R.UsersMetadatapubKeyReactions = append(o.R.UsersMetadatapubKeyReactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reactionR{
				UsersMetadatapubKeyUsersMetadatum: o,
			}
		} else {
			rel.R.UsersMetadatapubKeyUsersMetadatum = o
		}
	}
	return nil
}

// SetUsersMetadatapubKeyReactionsG removes all previously related items of the
// users_metadatum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyReactions accordingly.
// Replaces o.R.UsersMetadatapubKeyReactions with related.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyReactions accordingly.
// Uses the global database handle.
func (o *UsersMetadatum) SetUsersMetadatapubKeyReactionsG(ctx context.Context, insert bool, related ...*Reaction) error {
	return o.SetUsersMetadatapubKeyReactions(ctx, boil.GetContextDB(), insert, related...)
}

// SetUsersMetadatapubKeyReactions removes all previously related items of the
// users_metadatum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyReactions accordingly.
// Replaces o.R.UsersMetadatapubKeyReactions with related.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyReactions accordingly.
func (o *UsersMetadatum) SetUsersMetadatapubKeyReactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reaction) error {
	query := "update \"reactions\" set \"users_metadatapub_key\" = null where \"users_metadatapub_key\" = $1"
	values := []interface{}{o.PubKey}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UsersMetadatapubKeyReactions {
			queries.SetScanner(&rel.UsersMetadatapubKey, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UsersMetadatapubKeyUsersMetadatum = nil
		}
		o.R.UsersMetadatapubKeyReactions = nil
	}

	return o.AddUsersMetadatapubKeyReactions(ctx, exec, insert, related...)
}

// RemoveUsersMetadatapubKeyReactionsG relationships from objects passed in.
// Removes related items from R.UsersMetadatapubKeyReactions (uses pointer comparison, removal does not keep order)
// Sets related.R.UsersMetadatapubKeyUsersMetadatum.
// Uses the global database handle.
func (o *UsersMetadatum) RemoveUsersMetadatapubKeyReactionsG(ctx context.Context, related ...*Reaction) error {
	return o.RemoveUsersMetadatapubKeyReactions(ctx, boil.GetContextDB(), related...)
}

// RemoveUsersMetadatapubKeyReactions relationships from objects passed in.
// Removes related items from R.UsersMetadatapubKeyReactions (uses pointer comparison, removal does not keep order)
// Sets related.R.UsersMetadatapubKeyUsersMetadatum.
func (o *UsersMetadatum) RemoveUsersMetadatapubKeyReactions(ctx context.Context, exec boil.ContextExecutor, related ...*Reaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UsersMetadatapubKey, nil)
		if rel.R != nil {
			rel.R.UsersMetadatapubKeyUsersMetadatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("users_metadatapub_key")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UsersMetadatapubKeyReactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.UsersMetadatapubKeyReactions)
			if ln > 1 && i < ln-1 {
				o.R.UsersMetadatapubKeyReactions[i] = o.R.UsersMetadatapubKeyReactions[ln-1]
			}
			o.R.UsersMetadatapubKeyReactions = o.R.UsersMetadatapubKeyReactions[:ln-1]
			break
		}
	}

	return nil
}

// AddUsersMetadatapubKeyTextNotesG adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.UsersMetadatapubKeyTextNotes.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum appropriately.
// Uses the global database handle.
func (o *UsersMetadatum) AddUsersMetadatapubKeyTextNotesG(ctx context.Context, insert bool, related ...*TextNote) error {
	return o.AddUsersMetadatapubKeyTextNotes(ctx, boil.GetContextDB(), insert, related...)
}

// AddUsersMetadatapubKeyTextNotes adds the given related objects to the existing relationships
// of the users_metadatum, optionally inserting them as new records.
// Appends related to o.R.UsersMetadatapubKeyTextNotes.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum appropriately.
func (o *UsersMetadatum) AddUsersMetadatapubKeyTextNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TextNote) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UsersMetadatapubKey, o.PubKey)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"text_notes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"users_metadatapub_key"}),
				strmangle.WhereClause("\"", "\"", 2, textNotePrimaryKeyColumns),
			)
			values := []interface{}{o.PubKey, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UsersMetadatapubKey, o.PubKey)
		}
	}

	if o.R == nil {
		o.R = &usersMetadatumR{
			UsersMetadatapubKeyTextNotes: related,
		}
	} else {
		o.R.UsersMetadatapubKeyTextNotes = append(o.R.UsersMetadatapubKeyTextNotes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &textNoteR{
				UsersMetadatapubKeyUsersMetadatum: o,
			}
		} else {
			rel.R.UsersMetadatapubKeyUsersMetadatum = o
		}
	}
	return nil
}

// SetUsersMetadatapubKeyTextNotesG removes all previously related items of the
// users_metadatum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyTextNotes accordingly.
// Replaces o.R.UsersMetadatapubKeyTextNotes with related.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyTextNotes accordingly.
// Uses the global database handle.
func (o *UsersMetadatum) SetUsersMetadatapubKeyTextNotesG(ctx context.Context, insert bool, related ...*TextNote) error {
	return o.SetUsersMetadatapubKeyTextNotes(ctx, boil.GetContextDB(), insert, related...)
}

// SetUsersMetadatapubKeyTextNotes removes all previously related items of the
// users_metadatum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyTextNotes accordingly.
// Replaces o.R.UsersMetadatapubKeyTextNotes with related.
// Sets related.R.UsersMetadatapubKeyUsersMetadatum's UsersMetadatapubKeyTextNotes accordingly.
func (o *UsersMetadatum) SetUsersMetadatapubKeyTextNotes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TextNote) error {
	query := "update \"text_notes\" set \"users_metadatapub_key\" = null where \"users_metadatapub_key\" = $1"
	values := []interface{}{o.PubKey}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UsersMetadatapubKeyTextNotes {
			queries.SetScanner(&rel.UsersMetadatapubKey, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UsersMetadatapubKeyUsersMetadatum = nil
		}
		o.R.UsersMetadatapubKeyTextNotes = nil
	}

	return o.AddUsersMetadatapubKeyTextNotes(ctx, exec, insert, related...)
}

// RemoveUsersMetadatapubKeyTextNotesG relationships from objects passed in.
// Removes related items from R.UsersMetadatapubKeyTextNotes (uses pointer comparison, removal does not keep order)
// Sets related.R.UsersMetadatapubKeyUsersMetadatum.
// Uses the global database handle.
func (o *UsersMetadatum) RemoveUsersMetadatapubKeyTextNotesG(ctx context.Context, related ...*TextNote) error {
	return o.RemoveUsersMetadatapubKeyTextNotes(ctx, boil.GetContextDB(), related...)
}

// RemoveUsersMetadatapubKeyTextNotes relationships from objects passed in.
// Removes related items from R.UsersMetadatapubKeyTextNotes (uses pointer comparison, removal does not keep order)
// Sets related.R.UsersMetadatapubKeyUsersMetadatum.
func (o *UsersMetadatum) RemoveUsersMetadatapubKeyTextNotes(ctx context.Context, exec boil.ContextExecutor, related ...*TextNote) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UsersMetadatapubKey, nil)
		if rel.R != nil {
			rel.R.UsersMetadatapubKeyUsersMetadatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("users_metadatapub_key")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UsersMetadatapubKeyTextNotes {
			if rel != ri {
				continue
			}

			ln := len(o.R.UsersMetadatapubKeyTextNotes)
			if ln > 1 && i < ln-1 {
				o.R.UsersMetadatapubKeyTextNotes[i] = o.R.UsersMetadatapubKeyTextNotes[ln-1]
			}
			o.R.UsersMetadatapubKeyTextNotes = o.R.UsersMetadatapubKeyTextNotes[:ln-1]
			break
		}
	}

	return nil
}

// UsersMetadata retrieves all the records using an executor.
func UsersMetadata(mods ...qm.QueryMod) usersMetadatumQuery {
	mods = append(mods, qm.From("\"users_metadata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_metadata\".*"})
	}

	return usersMetadatumQuery{q}
}

// FindUsersMetadatumG retrieves a single record by ID.
func FindUsersMetadatumG(ctx context.Context, pubKey string, selectCols ...string) (*UsersMetadatum, error) {
	return FindUsersMetadatum(ctx, boil.GetContextDB(), pubKey, selectCols...)
}

// FindUsersMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersMetadatum(ctx context.Context, exec boil.ContextExecutor, pubKey string, selectCols ...string) (*UsersMetadatum, error) {
	usersMetadatumObj := &UsersMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_metadata\" where \"pub_key\"=$1", sel,
	)

	q := queries.Raw(query, pubKey)

	err := q.Bind(ctx, exec, usersMetadatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from users_metadata")
	}

	if err = usersMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersMetadatumObj, err
	}

	return usersMetadatumObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UsersMetadatum) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no users_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersMetadatumInsertCacheMut.RLock()
	cache, cached := usersMetadatumInsertCache[key]
	usersMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersMetadatumAllColumns,
			usersMetadatumColumnsWithDefault,
			usersMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into users_metadata")
	}

	if !cached {
		usersMetadatumInsertCacheMut.Lock()
		usersMetadatumInsertCache[key] = cache
		usersMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UsersMetadatum record using the global executor.
// See Update for more documentation.
func (o *UsersMetadatum) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UsersMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersMetadatumUpdateCacheMut.RLock()
	cache, cached := usersMetadatumUpdateCache[key]
	usersMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersMetadatumAllColumns,
			usersMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update users_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, append(wl, usersMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update users_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for users_metadata")
	}

	if !cached {
		usersMetadatumUpdateCacheMut.Lock()
		usersMetadatumUpdateCache[key] = cache
		usersMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q usersMetadatumQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q usersMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for users_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for users_metadata")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UsersMetadatumSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in usersMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all usersMetadatum")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UsersMetadatum) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("database: no users_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersMetadatumUpsertCacheMut.RLock()
	cache, cached := usersMetadatumUpsertCache[key]
	usersMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersMetadatumAllColumns,
			usersMetadatumColumnsWithDefault,
			usersMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersMetadatumAllColumns,
			usersMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert users_metadata, could not build update column list")
		}

		ret := strmangle.SetComplement(usersMetadatumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersMetadatumPrimaryKeyColumns) == 0 {
				return errors.New("database: unable to upsert users_metadata, could not build conflict column list")
			}

			conflict = make([]string, len(usersMetadatumPrimaryKeyColumns))
			copy(conflict, usersMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_metadata\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersMetadatumType, usersMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert users_metadata")
	}

	if !cached {
		usersMetadatumUpsertCacheMut.Lock()
		usersMetadatumUpsertCache[key] = cache
		usersMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UsersMetadatum record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UsersMetadatum) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UsersMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no UsersMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersMetadatumPrimaryKeyMapping)
	sql := "DELETE FROM \"users_metadata\" WHERE \"pub_key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from users_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for users_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q usersMetadatumQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q usersMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no usersMetadatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from users_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for users_metadata")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UsersMetadatumSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersMetadatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from usersMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for users_metadata")
	}

	if len(usersMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UsersMetadatum) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no UsersMetadatum provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersMetadatum(ctx, exec, o.PubKey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersMetadatumSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty UsersMetadatumSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_metadata\".* FROM \"users_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersMetadatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in UsersMetadatumSlice")
	}

	*o = slice

	return nil
}

// UsersMetadatumExistsG checks if the UsersMetadatum row exists.
func UsersMetadatumExistsG(ctx context.Context, pubKey string) (bool, error) {
	return UsersMetadatumExists(ctx, boil.GetContextDB(), pubKey)
}

// UsersMetadatumExists checks if the UsersMetadatum row exists.
func UsersMetadatumExists(ctx context.Context, exec boil.ContextExecutor, pubKey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_metadata\" where \"pub_key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, pubKey)
	}
	row := exec.QueryRowContext(ctx, sql, pubKey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if users_metadata exists")
	}

	return exists, nil
}

// Exists checks if the UsersMetadatum row exists.
func (o *UsersMetadatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersMetadatumExists(ctx, exec, o.PubKey)
}
